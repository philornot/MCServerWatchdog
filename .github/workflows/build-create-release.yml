name: Build, Test, Release and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  build-test-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Pobierz pełną historię dla prawidłowego tagowania

      # Testowanie kodu Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest semver
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          # Sprawdzenie tylko krytycznych błędów
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      # Można dodać testy, jeśli je masz
      # - name: Test with pytest
      #   run: |
      #     pytest

      # Generowanie wersji z inkrementacją - możesz wybrać typ przy ręcznym uruchomieniu
      - name: Generate version
        id: version
        run: |
          # Sprawdź typ releasu - domyślnie patch
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          RELEASE_TYPE=${RELEASE_TYPE:-patch}
          echo "Release type: $RELEASE_TYPE"
          
          # Funkcja do parsowania i inkrementacji wersji SemVer
          increment_version() {
            local version=$1
            local type=$2
            
            # Jeśli wersja nie jest w formacie SemVer, konwertuj ją
            if [[ ! $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              # Sprawdź czy istnieje version.txt
              if [ -f "version.txt" ]; then
                # Próbuj odczytać wersję z pliku
                local file_version=$(cat version.txt)
                # Sprawdź czy to jest SemVer
                if [[ $file_version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                  version=$file_version
                else
                  # Domyślna wersja startowa
                  version="1.0.0"
                fi
              else
                # Domyślna wersja startowa
                version="1.0.0"
              fi
            fi
            
            # Podziel wersję na części
            IFS='.' read -r major minor patch <<< "$version"
            
            # Inkrementuj odpowiednią część
            case $type in
              major)
                major=$((major + 1))
                minor=0
                patch=0
                ;;
              minor)
                minor=$((minor + 1))
                patch=0
                ;;
              patch)
                patch=$((patch + 1))
                ;;
            esac
            
            # Zwróć nową wersję
            echo "$major.$minor.$patch"
          }
          
          # Spróbuj znaleźć ostatni tag wersji
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          # Usuń 'v' z tagu jeśli istnieje
          if [[ $LAST_TAG == v* ]]; then
            CURRENT_VERSION=${LAST_TAG#v}
          else
            CURRENT_VERSION=$LAST_TAG
          fi
          
          # Inkrementuj wersję
          VERSION=$(increment_version "$CURRENT_VERSION" "$RELEASE_TYPE")
          
          # Jeśli to automatyczny push, dodaj datę i hash commita
          if [ "$RELEASE_TYPE" == "" ] || [ "${{ github.event_name }}" == "push" ]; then
            COMMIT_HASH=$(git rev-parse --short HEAD)
            BUILD_DATE=$(date +'%Y%m%d')
            VERSION="${VERSION}+${BUILD_DATE}.${COMMIT_HASH}"
          fi
          
          echo "Poprzednia wersja: $CURRENT_VERSION"
          echo "Nowa wersja: $VERSION"
          
          # Zapisz wersję do pliku
          echo "$VERSION" > version.txt
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      # Przygotowanie opisu zmian (changelog)
      - name: Generate changelog
        id: changelog
        run: |
          # Pobierz commity od ostatniego taga lub początku historii
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            # Jeśli nie ma tagów, weź wszystkie commity
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            # Jeśli są tagi, weź commity od ostatniego taga
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse)
          fi
          
          # Zapisz changelog do pliku
          echo "# Zmiany w wersji ${{ steps.version.outputs.VERSION }}" > changelog.md
          echo "" >> changelog.md
          echo "$CHANGELOG" >> changelog.md
          echo "" >> changelog.md
          echo "## Pełne informacje" >> changelog.md
          echo "- Wersja: ${{ steps.version.outputs.VERSION }}" >> changelog.md
          echo "- Data wydania: $(date +'%Y-%m-%d %H:%M:%S')" >> changelog.md
          
          # Escape tekstu dla GitHub Actions
          CHANGELOG_ESCAPED="${CHANGELOG//'%'/'%25'}"
          CHANGELOG_ESCAPED="${CHANGELOG_ESCAPED//$'\n'/'%0A'}"
          CHANGELOG_ESCAPED="${CHANGELOG_ESCAPED//$'\r'/'%0D'}"
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_ESCAPED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Budowanie i publikowanie obrazu Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/mcserverwatchdog:latest
            ghcr.io/${{ github.repository_owner }}/mcserverwatchdog:${{ steps.version.outputs.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Tworzenie taga git dla wersji
      - name: Create Git Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a v${{ steps.version.outputs.VERSION }} -m "Version ${{ steps.version.outputs.VERSION }}"
          git push origin v${{ steps.version.outputs.VERSION }}

      # Tworzenie releasu na GitHubie
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          name: Release v${{ steps.version.outputs.VERSION }}
          body: |
            ## MCServerWatchdog v${{ steps.version.outputs.VERSION }}
            
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ### Docker Image
            ```
            ghcr.io/${{ github.repository_owner }}/mcserverwatchdog:${{ steps.version.outputs.VERSION }}
            ```
            
            Pobierz i uruchom najnowszą wersję za pomocą Docker:
            ```bash
            docker pull ghcr.io/${{ github.repository_owner }}/mcserverwatchdog:${{ steps.version.outputs.VERSION }}
            ```
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}