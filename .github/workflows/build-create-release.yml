name: Build, Test, Release and Deploy

# Konfiguracja uprawnień — niezbędna do aktualizacji repozytorium i publikowania pakietów
permissions:
  contents: write  # Uprawnienia do pushowania zmian i tworzenia release'ów
  packages: write  # Uprawnienia do publikowania obrazów Docker

# Wyzwalacze workflow
on:
  # Uruchamianie ręczne z wyborem typu wersji
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Typ wydania'
        required: true
        default: 'patch'
        type: choice
        options:
          - prerelease  # Wydanie testowe (dodaje tylko hash, bez inkrementacji)
          - patch       # Drobne poprawki (zwiększa 0.0.X)
          - minor       # Nowe funkcje (zwiększa 0.X.0)
          - major       # Zmiany łamiące kompatybilność (zwiększa X.0.0)

# Definicja zadań
jobs:
  build-test-release:
    runs-on: ubuntu-latest

    steps:
      # Krok 1: Pobierz kod
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Pobierz pełną historię (potrzebne dla tagów i historii commitów)

      # Krok 2: Wykryj nazwę bieżącej gałęzi i zapisz ją jako zmienną
      - name: Get current branch
        id: branch
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "Current branch name: $BRANCH_NAME"
          echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      # Krok 3: Konfiguracja Pythona
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Krok 4: Instalacja zależności
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest semver
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # Krok 5: Lintowanie kodu (sprawdzanie błędów składniowych)
      - name: Lint with flake8
        id: lint
        continue-on-error: true  # Nie zatrzymuj workflow w przypadku błędów lintowania
        run: |
          # Sprawdzenie tylko krytycznych błędów
          LINT_OUTPUT=$(flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics)
          
          # Zapisz czy wystąpiły błędy
          if [ -n "$LINT_OUTPUT" ]; then
            echo "::warning::$LINT_OUTPUT"
            echo "Znaleziono problemy w kodzie, sprawdź szczegóły w logach"
            echo "has_errors=true" >> $GITHUB_OUTPUT
          else
            echo "Analiza kodu przebiegła pomyślnie"
            echo "has_errors=false" >> $GITHUB_OUTPUT
          fi

      # Krok 6: Generowanie i walidacja wersji z poprawioną obsługą błędów
      - name: Generate and Validate Version
        id: version
        run: |
          set -e  # Zakończ w przypadku błędu
          
          # Funkcja zwracająca skrócony hash aktualnego commita
          get_short_hash() {
            git rev-parse --short HEAD
          }
          
          # Funkcja inkrementująca wersję zgodnie z regułami SemVer
          increment_version() {
            local version="$1"
            local type="$2"
          
            echo "Debug: Inkrementacja wersji $version, typ: $type" >&2
          
            # Wyodrębnij bazową wersję (bez hasha)
            version_base="${version%%+*}"
            echo "Debug: Bazowa wersja (bez hasha): $version_base" >&2
          
            # Sprawdź czy format wersji jest poprawny
            if [[ ! $version_base =~ ^[0-9]+\.[0-9]+(\.[0-9]+)?$ ]]; then
              echo "::warning::Niepoprawny format wersji '$version_base'. Ustawiam domyślną wersję 1.0.0" >&2
              version_base="1.0.0"
            fi
          
            # Rozdziel wersję na składowe (major.minor.patch)
            local IFS='.'
            read -r major minor patch <<< "$version_base"
          
            # Jeśli patch jest pusty, ustaw go na 0
            patch=${patch:-0}
          
            echo "Debug: Składowe wersji: major=$major, minor=$minor, patch=$patch" >&2
          
            # Inkrementuj odpowiednią część wersji według typu wydania
            case "$type" in
              major)
                major=$((major + 1))
                minor=0
                patch=0
                ;;
              minor)
                minor=$((minor + 1))
                patch=0
                ;;
              patch)
                patch=$((patch + 1))
                ;;
              prerelease)
                # Dla wydania prerelease nie inkrementujemy numerów
                ;;
              *)
                echo "::warning::Nieznany typ wydania '$type'. Używam 'patch'" >&2
                patch=$((patch + 1))
                ;;
            esac
          
            # Zwróć nową wersję
            echo "$major.$minor.$patch"
          }
          
          # Pobierz typ wydania z parametrów
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          RELEASE_TYPE=${RELEASE_TYPE:-patch}
          echo "Typ wydania: $RELEASE_TYPE"
          
          # Walidacja typu wydania
          if [[ ! "$RELEASE_TYPE" =~ ^(prerelease|patch|minor|major)$ ]]; then
            echo "::warning::Nieprawidłowy typ wydania '$RELEASE_TYPE'. Używam domyślnego 'patch'."
            RELEASE_TYPE="patch"
          fi
          
          # Sprawdź, czy istnieje plik version.txt i pobierz aktualną wersję
          if [ -f "version.txt" ]; then
            VERSION=$(cat version.txt | tr -d '[:space:]')
            echo "Debug: Odczytana wersja z pliku: '$VERSION'"
          
            # Dodatkowa walidacja formatu wersji w pliku
            if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(\+[a-zA-Z0-9]+)?$ ]]; then
              echo "::warning::Nieprawidłowy format wersji w version.txt: '$VERSION', resetuję do 1.0.0"
              VERSION="1.0.0"
            fi
          
            echo "Aktualna wersja: $VERSION"
          
            # Inkrementuj wersję bazową tylko jeśli plik istnieje
            BASE_VERSION=$(increment_version "$VERSION" "$RELEASE_TYPE")
            echo "Bazowa wersja po inkrementacji: $BASE_VERSION"
          else
            # Jeśli plik nie istnieje, użyj wersji 1.0.0 bez inkrementacji
            BASE_VERSION="1.0.0"
            echo "Nie znaleziono pliku version.txt, używam wersji początkowej: $BASE_VERSION"
          fi
          
          # Tylko dla wydania prerelease dodaj hash commita
          SHORT_HASH=$(get_short_hash)
          if [[ "$RELEASE_TYPE" == "prerelease" ]]; then
            NEW_VERSION="${BASE_VERSION}+${SHORT_HASH}"
            echo "Dodano hash commita dla prerelease: $SHORT_HASH"
          else
            NEW_VERSION="$BASE_VERSION"
          fi
          
          # Debugowanie wygenerowanej wersji
          echo "Debug: Wygenerowana wersja: '$NEW_VERSION'"
          
          # Zwaliduj format nowej wersji
          if [[ ! "$NEW_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(\+[a-zA-Z0-9]+)?$ ]]; then
            echo "::error::Błąd: Wygenerowana wersja '$NEW_VERSION' jest nieprawidłowa."
            echo "Debug: Składowe:"
            echo "- BASE_VERSION: $BASE_VERSION"
            echo "- RELEASE_TYPE: $RELEASE_TYPE" 
            echo "- SHORT_HASH: $SHORT_HASH"
            exit 1
          fi
          
          # Zapisz nową wersję do pliku version.txt
          echo "$NEW_VERSION" > version.txt
          echo "Debug: Zapisana wersja w pliku:"
          cat version.txt
          
          # Ustaw zmienne wyjściowe dla kolejnych kroków
          echo "clean_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$([[ "$RELEASE_TYPE" == "prerelease" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "Wygenerowana wersja: $NEW_VERSION (prerelease: $([[ "$RELEASE_TYPE" == "prerelease" ]] && echo "tak" || echo "nie"))"

      # Krok 7: Commitowanie zmian w pliku version.txt (z obsługą konfliktów)
      - name: Commit version file
        id: commit
        run: |
          # Pobierz nazwę bieżącej gałęzi z poprzedniego kroku
          BRANCH_NAME="${{ steps.branch.outputs.name }}"
          echo "Bieżąca gałąź: $BRANCH_NAME"
          
          # Konfiguracja Git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions"
          
          # Sprawdź, czy plik version.txt został zmieniony
          if [[ -n "$(git status --porcelain version.txt)" ]]; then
            echo "Plik version.txt został zmieniony, tworzę commit..."
          
            # Dodaj plik version.txt do stage
            git add version.txt
          
            # Utwórz commit
            git commit -m "Aktualizacja version.txt do wersji ${{ steps.version.outputs.clean_version }}"
          
            # Próba push z obsługą konfliktów
            echo "Próba push zmian do gałęzi $BRANCH_NAME..."
          
            # Najpierw pobierz najnowsze zmiany z remote, zachowując lokalny commit
            git fetch origin $BRANCH_NAME
          
            # Opcja 1: Próba rebase (preferowana, zachowuje historię liniową)
            if git rebase origin/$BRANCH_NAME; then
              echo "Rebase zakończony pomyślnie, wykonuję push..."
              git push origin HEAD:${BRANCH_NAME}
            else
              # Opcja 2: Anuluj rebase i spróbuj merge
              git rebase --abort
              echo "Rebase nie powiódł się, próbuję merge..."
          
              if git pull --no-rebase origin $BRANCH_NAME && git push origin HEAD:${BRANCH_NAME}; then
                echo "Merge i push zakończone pomyślnie"
              else
                # Opcja 3: W skrajnym przypadku, gdy wszystko inne zawiedzie, użyj force push
                echo "UWAGA: Standardowy push nie powiódł się, używam force push jako ostatniej opcji"
                if git push --force origin HEAD:${BRANCH_NAME}; then
                  echo "Force push zakończony pomyślnie"
                else
                  echo "Force push również się nie powiódł. Anulowanie."
                  exit 1
                fi
              fi
            fi
          
            echo "Zaktualizowano plik version.txt w repozytorium"
            echo "committed=true" >> $GITHUB_OUTPUT
          else
            echo "Plik version.txt nie uległ zmianie, pomijam commit"
            echo "committed=false" >> $GITHUB_OUTPUT
          fi

      # Krok 8: Generowanie changelog z poprawioną obsługą błędów
      - name: Generate changelog
        id: changelog
        run: |
          set -e  # Zakończ w przypadku błędu
          
          # Dodatkowe debugowanie
          echo "Debug: Uruchamianie kroku generowania changelog"
          
          # Użyj odpowiedniego punktu odniesienia do wyszukiwania commitów
          if [[ "${{ steps.commit.outputs.committed }}" == "true" ]]; then
            echo "Poprzedni commit zawierał aktualizację version.txt, uwzględniam w changelog"
            # Użyj HEAD~1 jako bazy, aby uwzględnić ostatni commit aktualizujący wersję
            GIT_REF_BASE="HEAD~1"
          else
            echo "Poprzedni commit nie zawierał aktualizacji version.txt"
            GIT_REF_BASE="HEAD"
          fi
          
          # Pobierz commity od ostatniego taga lub początku historii
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            echo "Nie znaleziono tagów, pobieram wszystkie commity (maksymalnie 20)"
            # Jeśli nie ma tagów, weź wszystkie commity z zabezpieczeniem przed pustą listą
            COMMIT_LIST=$(git log --pretty=format:"%h||%an||%s" --reverse 2>/dev/null || echo "")
            if [ -n "$COMMIT_LIST" ]; then
              COMMIT_LIST=$(echo "$COMMIT_LIST" | tail -n 20)
            fi
          else
            echo "Znaleziono tag $LAST_TAG, pobieram commity od tego tagu"
            # Jeśli są tagi, weź commity od ostatniego taga
            COMMIT_LIST=$(git log ${LAST_TAG}..${GIT_REF_BASE} --pretty=format:"%h||%an||%s" --reverse 2>/dev/null || echo "")
          fi
          
          # Debug - pokaż listę commitów
          echo "Debug: Lista commitów do przetworzenia:"
          echo "$COMMIT_LIST" | head -n 5
          echo "..."
          
          # Sprawdzamy, czy lista jest pusta
          if [ -z "$COMMIT_LIST" ]; then
            echo "Nie znaleziono żadnych commitów do przetworzenia."
            FINAL_CHANGELOG="Brak zmian od ostatniego wydania."
          else
            echo "Znaleziono commity, przetwarzam..."
          
            # Przygotuj kategorie jako zwykłe tablice zamiast asocjacyjnych (dla kompatybilności)
            CATEGORY_TYPES=("fix" "feat" "docs" "style" "refactor" "perf" "test" "build" "ci" "chore")
            CATEGORY_NAMES=("Poprawki błędów" "Nowe funkcje" "Dokumentacja" "Formatowanie kodu" "Refaktoryzacja" "Optymalizacja" "Testy" "Build" "CI/CD" "Porządki")
            CATEGORY_EMOJIS=("🐛" "✨" "📚" "💎" "♻️" "🚀" "🧪" "🔧" "🤖" "🧹")
          
            # Inicjalizacja zmiennych dla kategorii
            fix_commits=""
            feat_commits=""
            docs_commits=""
            style_commits=""
            refactor_commits=""
            perf_commits=""
            test_commits=""
            build_commits=""
            ci_commits=""
            chore_commits=""
            other_commits=""
          
            # Przetwarzanie commitów - zapisujemy najpierw do pliku tymczasowego
            echo "$COMMIT_LIST" > /tmp/commits.txt
          
            # Przetwarzanie linii po linii z zabezpieczeniem
            while IFS= read -r line; do
              if [ -z "$line" ]; then
                continue
              fi
          
              # Parsowanie linii na hash, autora i wiadomość (z obsługą błędów)
              hash=$(echo "$line" | cut -d'|' -f1 || echo "")
              author=$(echo "$line" | cut -d'|' -f3 || echo "Unknown")
              message=$(echo "$line" | cut -d'|' -f5- || echo "")
          
              if [ -z "$hash" ] || [ -z "$message" ]; then
                echo "Debug: Pomijam nieprawidłowy format: $line"
                continue
              fi
          
              # Uproszczone określanie typu commita
              commit_type="other"
              for type in "${CATEGORY_TYPES[@]}"; do
                if [[ "$message" == "$type"* || "$message" == *"[$type]"* || "$message" == *"($type)"* ]]; then
                  commit_type="$type"
                  break
                fi
              done
          
              # Oczyszczenie wiadomości commita (uproszczone)
              clean_message=$(echo "$message" | sed 's/^.*://' | sed 's/^\s*//')
              if [ -z "$clean_message" ]; then
                clean_message="$message"
              fi
          
              # Formatowanie wpisu
              formatted_entry="* ${clean_message} [${hash}](https://github.com/${{ github.repository }}/commit/${hash})"
          
              # Przypisanie do odpowiedniej kategorii
              case "$commit_type" in
                "fix") fix_commits="${fix_commits}${formatted_entry}\n" ;;
                "feat") feat_commits="${feat_commits}${formatted_entry}\n" ;;
                "docs") docs_commits="${docs_commits}${formatted_entry}\n" ;;
                "style") style_commits="${style_commits}${formatted_entry}\n" ;;
                "refactor") refactor_commits="${refactor_commits}${formatted_entry}\n" ;;
                "perf") perf_commits="${perf_commits}${formatted_entry}\n" ;;
                "test") test_commits="${test_commits}${formatted_entry}\n" ;;
                "build") build_commits="${build_commits}${formatted_entry}\n" ;;
                "ci") ci_commits="${ci_commits}${formatted_entry}\n" ;;
                "chore") chore_commits="${chore_commits}${formatted_entry}\n" ;;
                *) other_commits="${other_commits}${formatted_entry}\n" ;;
              esac
            done < /tmp/commits.txt
          
            # Przygotowanie changeloga
            FINAL_CHANGELOG=""
          
            # Dodawanie sekcji dla każdej kategorii
            for i in "${!CATEGORY_TYPES[@]}"; do
              type="${CATEGORY_TYPES[$i]}"
              name="${CATEGORY_NAMES[$i]}"
              emoji="${CATEGORY_EMOJIS[$i]}"
          
              # Pobierz zawartość odpowiedniej zmiennej
              case "$type" in
                "fix") commits="$fix_commits" ;;
                "feat") commits="$feat_commits" ;;
                "docs") commits="$docs_commits" ;;
                "style") commits="$style_commits" ;;
                "refactor") commits="$refactor_commits" ;;
                "perf") commits="$perf_commits" ;;
                "test") commits="$test_commits" ;;
                "build") commits="$build_commits" ;;
                "ci") commits="$ci_commits" ;;
                "chore") commits="$chore_commits" ;;
                *) commits="" ;;
              esac
          
              # Dodaj sekcję jeśli są jakieś commity
              if [ -n "$commits" ]; then
                FINAL_CHANGELOG="${FINAL_CHANGELOG}### ${emoji} ${name}\n${commits}\n"
              fi
            done
          
            # Dodaj inne zmiany
            if [ -n "$other_commits" ]; then
              FINAL_CHANGELOG="${FINAL_CHANGELOG}### 🔄 Inne zmiany\n${other_commits}\n"
            fi
          
            # Jeśli nie ma zmian, dodaj informację
            if [ -z "$FINAL_CHANGELOG" ]; then
              FINAL_CHANGELOG="Brak zmian od ostatniego wydania."
            fi
          fi
          
          # Dodaj informację o paczce instalacyjnej ZIP
          INSTALL_INFO="\n## 📥 Instalacja/Aktualizacja\n\nDla ułatwienia instalacji/aktualizacji, dołączono paczkę instalacyjną `mcserverwatchdog-v${{ steps.version.outputs.clean_version }}.zip`, która zawiera wszystkie niezbędne pliki do uruchomienia bota (main.py, pretty_logger.py, version.txt).\n\n**Jak zaktualizować bota na serwerze:**\n\n1. Pobierz plik ZIP z tej strony\n2. Rozpakuj pliki do katalogu bota na serwerze (nadpisując istniejące pliki)\n3. Upewnij się, że plik .env jest skonfigurowany poprawnie\n4. Uruchom ponownie bota\n\nPlik .env nie jest dołączony do paczki i musisz go skonfigurować samodzielnie.\n"
          
          # Dodaj informację o prerelease
          if [[ "${{ steps.version.outputs.is_prerelease }}" == "true" ]]; then
            echo "⚠️ **PRERELEASE**: Ta wersja jest oznaczona jako wydanie wstępne" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Zapisz changelog do pliku
          echo "# 📦 MCServerWatchdog v${{ steps.version.outputs.clean_version }}" > changelog.md
          echo "" >> changelog.md
          echo "Data wydania: $(date +'%d.%m.%Y')" >> changelog.md
          echo "" >> changelog.md
          echo -e "## 📋 Lista zmian\n" >> changelog.md
          echo -e "$FINAL_CHANGELOG" >> changelog.md
          echo -e "$INSTALL_INFO" >> changelog.md
          echo "## 📊 Statystyki" >> changelog.md
          echo "- Wersja: ${{ steps.version.outputs.clean_version }}" >> changelog.md
          
          # Dodaj statystyki
          if [ -n "$COMMIT_LIST" ]; then
            COMMIT_COUNT=$(echo "$COMMIT_LIST" | wc -l)
            echo "- Liczba commitów: $COMMIT_COUNT" >> changelog.md
          
            # Uproszczona obsługa autorów
            REPO_OWNER="${{ github.repository_owner }}"
            echo "- Autorzy: $REPO_OWNER" >> changelog.md
          else
            echo "- Liczba commitów: 0" >> changelog.md
            echo "- Autorzy: Brak nowych commitów" >> changelog.md
          fi
          
          # Debug: Pokaż zawartość changeloga
          echo "Debug: Wygenerowany changelog:"
          cat changelog.md
          
          # Zapisz changelog jako output
          echo 'CHANGELOG<<EOF' >> $GITHUB_OUTPUT
          cat changelog.md >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      # Krok 9: Przygotowanie tagów Docker (zastąpienie + na -)
      - name: Prepare Docker tags
        id: docker_tags
        run: |
          # Pobierz wersję
          VERSION="${{ steps.version.outputs.clean_version }}"
          
          # Zastąp znak + na - w wersji dla tagu Dockera
          DOCKER_VERSION="${VERSION//+/-}"
          echo "Docker tag version: $DOCKER_VERSION"
          
          # Zapisz zmienną do outputs
          echo "version=$DOCKER_VERSION" >> $GITHUB_OUTPUT

      # Krok 10: Konfiguracja Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Krok 11: Logowanie do GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Krok 12: Budowanie i publikowanie obrazu Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/mcserverwatchdog:latest
            ghcr.io/${{ github.repository_owner }}/mcserverwatchdog:${{ steps.docker_tags.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Krok 13: Przygotowanie paczki instalacyjnej ZIP
      - name: Create installation package
        id: create_package
        run: |
          set -e  # Zatrzymaj się przy pierwszym błędzie
          
          # Instalacja narzędzia zip
          echo "Instalacja narzędzia zip..."
          sudo apt-get update && sudo apt-get install -y zip
          
          # Weryfikacja instalacji zip
          echo "Sprawdzanie dostępności narzędzia zip..."
          which zip
          
          # Ustal nazwę pliku ZIP
          VERSION="${{ steps.version.outputs.clean_version }}"
          ZIP_FILENAME="mcserverwatchdog-v${VERSION}.zip"
          echo "Tworzenie paczki instalacyjnej: ${ZIP_FILENAME}"
          
          # Przygotuj katalog tymczasowy
          echo "Przygotowanie katalogu tymczasowego..."
          rm -rf temp_package || true
          mkdir -p temp_package
          
          # Lista plików do skopiowania
          echo "Kopiowanie plików do paczki..."
          
          # Wymagane pliki - jeśli którykolwiek brakuje, wyświetl ostrzeżenie ale kontynuuj
          for file in main.py pretty_logger.py version.txt requirements.txt; do
            if [ -f "$file" ]; then
              echo "Kopiowanie $file..."
              cp "$file" temp_package/ || echo "⚠️ Ostrzeżenie: Nie udało się skopiować pliku $file"
            else
              echo "⚠️ Ostrzeżenie: Brak pliku $file"
            fi
          done
          
          # Opcjonalne pliki
          if [ -f ".env.example" ]; then
            cp ".env.example" temp_package/ || echo "⚠️ Ostrzeżenie: Nie udało się skopiować pliku .env.example"
          fi
          
          # Tworzenie pliku README
          echo "Tworzenie pliku README.txt..."
          cat > temp_package/README.txt << EOF
          MCServerWatchdog v${VERSION}
          ==========================================
          
          Aby uruchomić bota:
          
          1. Upewnij się, że masz zainstalowanego Pythona 3.10 lub nowszego
          2. Zainstaluj wymagane biblioteki: pip install -r requirements.txt 
          3. Skopiuj plik .env.example do .env i uzupełnij wszystkie wymagane dane
          4. Uruchom bota: python main.py
          
          Więcej informacji znajdziesz na stronie projektu:
          https://github.com/${{ github.repository }}
          EOF
          
          # Sprawdzenie zawartości katalogu
          echo "Zawartość katalogu temp_package:"
          ls -la temp_package/
          
          # Sprawdzenie czy katalog nie jest pusty
          if [ -z "$(ls -A temp_package/)" ]; then
            echo "::error::Katalog temp_package jest pusty, nie można utworzyć paczki"
            exit 1
          fi
          
          # Tworzenie archiwum ZIP
          echo "Tworzenie archiwum ZIP..."
          (cd temp_package && zip -r "../${ZIP_FILENAME}" *)
          
          # Sprawdzenie czy plik ZIP został utworzony poprawnie
          if [ -f "${ZIP_FILENAME}" ]; then
            echo "✅ Paczka instalacyjna została utworzona pomyślnie: ${ZIP_FILENAME}"
            ls -lh "${ZIP_FILENAME}"
            echo "filename=${ZIP_FILENAME}" >> $GITHUB_OUTPUT
          else
            echo "::error::Nie udało się utworzyć paczki instalacyjnej"
            exit 1
          fi

      # Krok 14: Tworzenie tagu Git dla wersji
      - name: Create Git Tag
        if: success() # Wykonuj, tylko jeśli poprzednie kroki się powiodły
        run: |
          # Konfiguracja Git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions"
          
          # Pobierz wersję
          VERSION="${{ steps.version.outputs.clean_version }}"
          echo "Tworzenie tagu Git dla wersji: v$VERSION"
          
          # Sprawdź, czy tag już istnieje (unikaj błędów)
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "::warning::Tag v$VERSION już istnieje, pomijam tworzenie tagu"
          else
            # Utwórz tag lokalnie
            git tag -a "v$VERSION" -m "Version $VERSION"
          
            # Wypchnij tag do repozytorium
            git push origin "v$VERSION"
            echo "Tag v$VERSION został utworzony i wysłany do repozytorium"
          fi

      # Krok 15: Tworzenie wydania na GitHubie z dołączonym ZIP
      - name: Create GitHub Release
        if: success() && steps.create_package.outputs.filename != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.clean_version }}
          name: Release v${{ steps.version.outputs.clean_version }}
          body: "${{ steps.changelog.outputs.CHANGELOG }}"
          draft: false
          prerelease: ${{ steps.version.outputs.is_prerelease }}
          generate_release_notes: false
          files: |
            ${{ steps.create_package.outputs.filename }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Krok 16: Podsumowanie wykonania workflow
      - name: Summary
        if: always()
        run: |
          echo "### 📦 MCServerWatchdog Deployment" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ **Status**: Sukces" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Wersja**: v${{ steps.version.outputs.clean_version }}" >> $GITHUB_STEP_SUMMARY
            
            # Dodaj informację o prerelease
            if [[ "${{ steps.version.outputs.is_prerelease }}" == "true" ]]; then
              echo "⚠️ **PRERELEASE**: Ta wersja jest oznaczona jako wydanie wstępne" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "🏷️ **Docker tag**: ghcr.io/${{ github.repository_owner }}/mcserverwatchdog:${{ steps.docker_tags.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "📅 **Data wydania**: $(date +'%d.%m.%Y %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
            
            if [[ -n "${{ steps.create_package.outputs.filename }}" ]]; then
              echo "📥 **Paczka instalacyjna**: ${{ steps.create_package.outputs.filename }}" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Paczka instalacyjna**: Nie utworzono" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Dodaj informację o lintowaniu
            if [[ "${{ steps.lint.outputs.has_errors }}" == "true" ]]; then
              echo "⚠️ **Ostrzeżenie**: Wykryto problemy w kodzie podczas lintowania" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ **Linting**: Kod przeszedł wszystkie testy" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Dodaj link do wydania
            echo "🔗 **Link do wydania**: [v${{ steps.version.outputs.clean_version }}](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.clean_version }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status**: Niepowodzenie" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Przyczyna**: Proces CI/CD nie zakończył się pomyślnie" >> $GITHUB_STEP_SUMMARY
          fi